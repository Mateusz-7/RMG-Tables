import logging
import tkinter as tk
from tkinter.font import Font

from configs.utils import Colors

log = logging.getLogger(__name__)


class MapLinkFrame(tk.Frame):
    """
    A frame that allows users to input a Google Maps link for processing.
    
    This frame provides a user interface for entering a Google Maps link, which will
    be processed to generate route information. It includes an entry field for the link,
    a submit button, and instructions for proper map formatting.
    
    Parameters:
        parent (tk.Widget): The parent widget in which this frame will be placed.
        controller: The controller object that manages frame switching and data processing.
                   Must implement show_frame() and process_map_link() methods.
    
    Attributes:
        controller: Reference to the controller for frame navigation and data processing.
        entry (tk.Entry): The entry field where users input the map link.
        submit_button (tk.Button): Button that triggers the link processing.
    """
    def __init__(self, parent, controller):
        log.info("Please provide map link")
        super().__init__(parent)
        self.controller = controller
        self.config(bg=Colors.BG_COLOR)

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        content_frame = tk.Frame(self, bg=Colors.BG_COLOR)
        content_frame.grid(row=0, column=0)

        label = tk.Label(
            content_frame,
            text="Podaj link do mapy:",
            font=("Runmageddon", 35),
            bg=Colors.BG_COLOR,
            fg=Colors.YELLOW
        )
        label.pack(pady=(80, 50))

        self.entry = tk.Entry(content_frame, width=70, font=Font(size=10))
        self.entry.pack(pady=10)
        self.bind_submit_button()
        self.entry.focus_set()

        # TODO: Delete after testing
        # self.entry.insert(0,"https://www.google.com/maps/d/u/0/edit?mid=1QU5ydDpF5bg_8jfQca3An2qJfqddpcY&ll=53.08931730768191%2C21.56582239999997&z=15")
        # self.entry.insert(0, "https://www.google.com/maps/d/u/1/edit?mid=134VUSLwnSE0LorF8FeYLEd3E6EhIYwc&usp=sharing")

        self.submit_button = tk.Button(
            content_frame,
            text="GENERUJ",
            font=("Runmageddon", 20),
            bg=Colors.YELLOW,
            fg=Colors.BLACK,
            activeforeground=Colors.YELLOW,
            activebackground=Colors.BG_COLOR,
            bd=5,
            width=10,
            command=self.submit_link,
            cursor="hand2"
        )
        self.submit_button.pack(pady=(10, 80))

        disclaimer_label = tk.Label(
            content_frame,
            text='Mapa musi być udostępniona/widoczna poprzez link\n'
                 'Wszystkie nazwy dystansów muszą zaczynać się od "TRASA"\n'
                 'Warstwa najdłuższego dystansu musi być przed pozostałymi dystansami',
            font=("Runmageddon", 10),
            bg=Colors.BG_COLOR,
            fg=Colors.TEXT_COLOR
        )
        disclaimer_label.pack()

        self.submit_button.bind("<Enter>", self.on_enter)
        self.submit_button.bind("<Leave>", self.on_leave)

    def on_enter(self, event):
        """
        Changes the button appearance when the mouse cursor enters the button area.
        
        Parameters:
            event: The event object generated by the mouse entering the button area.
        
        Returns:
            None
        """
        self.submit_button.config(bg=Colors.YELLOW, fg=Colors.BG_VERY_LIGHT)

    def on_leave(self, event):
        """
        Restores the button appearance when the mouse cursor leaves the button area.
        
        Parameters:
            event: The event object generated by the mouse leaving the button area.
        
        Returns:
            None
        """
        self.submit_button.config(bg=Colors.YELLOW, fg=Colors.BLACK)

    def submit_link(self, event=None):
        """
        Processes the map link entered by the user.
        
        Retrieves the link from the entry field, logs it, switches to the loading frame,
        and initiates the map link processing through the controller.
        
        Parameters:
            event: Optional event object if triggered by a key binding.
        
        Returns:
            None
        """
        map_link = self.entry.get()
        if map_link:
            log.info("Map link provided: %s", map_link)
            self.controller.show_frame("LoadingFrame")
            self.controller.process_map_link(map_link)

    def bind_submit_button(self):
        """
        Binds the Enter and Keypad Enter keys to the submit_link function.
        
        This allows users to submit the form by pressing Enter instead of clicking the button.
        
        Returns:
            None
        """
        self.entry.bind("<Return>", self.submit_link)
        self.entry.bind("<KP_Enter>", self.submit_link)

    def unbind_submit_button(self):
        """
        Unbinds the Enter and Keypad Enter keys from the submit_link function.
        
        This prevents form submission via Enter key when needed.
        
        Returns:
            None
        """
        self.entry.unbind("<Return>")
        self.entry.unbind("<KP_Enter>")
